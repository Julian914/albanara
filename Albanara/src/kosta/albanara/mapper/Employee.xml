<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kosta.albanara.mapper.EmployeeMapper">
	<!-- <cache /> -->
	<resultMap id="Employees" type="Employees">
		<result column="EMPLOYEE_SEQ" property="employeeSeq" />
		<result column="RESUME_SEQ" property="resumeSeq" />
		<result column="EMPLOYEE_ID" property="employeeId" />
		<result column="EMPLOYEE_PW" property="employeePw" />
		<result column="EMPLOYEE_NAME" property="employeeName" />
		<result column="EMPLOYEE_BIRTHDAY" property="employeeBirthday" />
		<result column="EMPLOYEE_EMAIL" property="employeeEmail" />
		<result column="EMPLOYEE_GENDER" property="employeeGender" />
		<result column="EMPLOYEE_PHONE" property="employeePhone" />
		<result column="EMPLOYEE_ADDRESS" property="employeeAddress" />
		<result column="ATTRIBUTE_COUNT" property="attributeCount" />
		<result column="NOSHOW_COUNT" property="noshowCount" />
		<result column="LATE_COUNT" property="lateCount" />
		<result column="WORKING_DAY_COUNT" property="workingDayCount" />
		<result column="ACTIVITY_AVG" property="activityAvg" />
		<result column="COLLABORATION_AVG" property="collaborationAvg" />
		<result column="DILIGENCY_AVG" property="diligencyAvg" />
		<result column="LEADERSHIP_AVG" property="leadershipAvg" />
		<result column="COMPREHENSION_AVG" property="comprehensionAvg" />
		<result column="CONTENTMENT_AVG" property="contentmentAvg" />
		<result column="STRENGTH_COUNT" property="strengthCount" />
		<result column="INTELLIGENCE_COUNT"
			property="intelligenceCount" />
		<result column="KINDNESS_COUNT" property="kindnessCount" />
		<result column="PATIENCE_COUNT" property="patienceCount" />
	</resultMap>

	<resultMap type="Resumes" id="Resumes">
		<result column="RESUME_SEQ" property="resumeSeq" />
		<result column="PICTURE_FILENAME" property="pictureFilename" />
		<result column="RESUME_TITLE" property="resumeTitle" />
		<result column="RESUME_CONTENTS" property="resumeContents" />
		<result column="DESIRED_WORKING_AREA"
			property="desiredWorkingArea" />
		<result column="FAVORITE_FIELD" property="favoriteField" />
		<result column="LAST_MODIFY_DATE" property="lastModifyDate" />
	</resultMap>


	<insert id="insertEmployee" parameterType="Employees">
		insert into employees(
		employee_seq, employee_id, employee_pw, employee_name,
		employee_birthday, employee_email, employee_gender, employee_phone,
		employee_address)
		values(s_employee_seq.nextval, #{employeeId, jdbcType=VARCHAR}, #{employeePw, jdbcType=VARCHAR},
		#{employeeName, jdbcType=VARCHAR}, #{employeeBirthday, jdbcType=DATE},
		#{employeeEmail, jdbcType=VARCHAR},
		#{employeeGender, jdbcType=VARCHAR}, #{employeePhone, jdbcType=VARCHAR},
		#{employeeAddress, jdbcType=VARCHAR})
	</insert>

	<!-- 이력서 등록 (동현) -->
	<insert id="insertResume" parameterType="Resumes">
		insert into resumes
		values(s_resume_seq.nextval, #{pictureFilename}, #{resumeTitle},
		#{resumeContents}, #{desiredWorkingArea}, #{favoriteField}, sysdate)
	</insert>

	<!-- 이력서 조회 (동현) -->
	<select id="searchResume" parameterType="int"
		resultMap="Resumes">
		<!-- select picture_filename, resume_title, resume_contents, desired_working_area, 
			favorite_field from resumes where resume_seq = (select resume_seq from employees 
			where employee_seq = #{employeeSeq}) -->
		select * from resumes where resume_seq = (select resume_seq from
		employees where employee_seq = 1)
	</select>

	<!-- 이력서 수정 (동현) -->
	<update id="updateResume" parameterType="Resumes">
		update resumes set
		picture_filename = #{pictureFilename}, resume_title = #{resumeTitle},
		resume_contents = #{resumeContents}, desired_working_area =
		#{desiredWorkingArea}, favorite_field = #{favoriteField},
		last_modify_date = sysdate where resume_seq = 1
	</update>

	<update id="updateEmployee" parameterType="Employees">
		update employees set
		employee_pw = #{employeePw}, employee_email = #{employeeEmail},
		employee_address = #{employeeAddress}, employee_phone =
		#{employeePhone} where employee_id = #{employeeId}
	</update>


	<!-- 기본정보 보여주기 (동현) -->
	<select id="basicInformation" parameterType="int"
		resultMap="Employees">
		<!-- select * from employees where employee_seq = #{employeeSeq} -->
		select * from employees where employee_seq = 3
	</select>

	<select id="getEmployee" parameterType="int"
		resultMap="Employees">
		select * from EMPLOYEES where EMPLOYEE_SEQ = #{seq}
	</select>

	<delete id="deleteEmployee" parameterType="Employees">
		delete from employees
		where employee_id = #{employeeId}
	</delete>

	<select id="employeeLogIn" parameterType="Employees"
		resultMap="Employees">
		select * from employees where employee_id= #{employeeId} AND
		employee_pw = #{employeePw}
	</select>

	<select id ="allEmployeeList" resultMap = "Employees">
		select * from employees
	</select>

<!-- 해당 공고의 지원자 목록 불러오기 -->
	<select id="employeeList" parameterType="int"
		resultMap="Employees">
		select * from employees where employee_Seq in(select
		employee_Seq from applications where
		recruitment_Seq=#{recruitmentSeq})
	</select>

<!-- 마감된 공고의 채용자 목록 불러오기 -->
	<select id="hiredEmployeeList" resultMap="Employees">
		select *from employees where employee_Seq in(select employee_Seq from hired_history where is_completed in(0,1))

	</select>
</mapper>